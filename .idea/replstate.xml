<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1465967387675">{:repl-history {:ide [], :local [&quot;(def x \&quot;Test\&quot;)&quot; &quot;(= \&quot;Test\&quot; (read-string \&quot;Test\&quot;))&quot; &quot;(= \&quot;Test\&quot; (str (read-string \&quot;Test\&quot;)))&quot; &quot;(def x {:test 1 :test2 2})&quot; &quot;(def x '({:test 1 :test2 2} {:test 1 :test3 3}))&quot; &quot;(filter #(= 1 (% :test)) x)&quot; &quot;(filter #(= 2 (% :test2)) x)&quot; &quot;(= \&quot;Customer\&quot; \&quot;Customer\&quot;)&quot; &quot;(doc identity)&quot; &quot;(count \&quot;Customer\&quot;)&quot; &quot;(def x \&quot;634, Start, End, here, stop, there\\n\&quot;)&quot; &quot;(clojure.string/split-lines x)&quot; &quot;(def y (clojure.string/split-lines x))&quot; &quot;(first y)&quot; &quot;(def z (map #(str/split % #\&quot;,\&quot;) y))&quot; &quot;z&quot; &quot;(first (first z))&quot; &quot;(count (first (first z)))&quot; &quot;(println (first (first z)))&quot; &quot;(def header [:1 :2 :3 :4 :5 :6])&quot; &quot;(def a (map #(zipmap header %) z))&quot; &quot;a&quot; &quot;(first a)&quot; &quot;((first a) :1)&quot; &quot;(println ((first a) :1))&quot; &quot;(println ((first a) :2))&quot; &quot;(count ((first a) :1))&quot; &quot;(def x '({:a 1 :b 2} {:a 2 :b 3} {:a 3 :b 4}))&quot; &quot;(map :a x)&quot; &quot;(Math/pow 4 2)&quot; &quot;{(map :a x) (map :b x)}&quot; &quot;(def y )&quot; &quot;(def y {(map :a x) (map :b x)})&quot; &quot;y&quot; &quot;(map #((first %) (second %)) y)&quot; &quot;(map #(conj (first %) (second %)) y)&quot; &quot;(map (println %) y)&quot; &quot;(map #(println %) y)&quot; &quot;(map #(println (first %)) y)&quot; &quot;(map #(into {} (first %) (second %)) y)&quot; &quot;(map #(into {(first %)} (second %)) y)&quot; &quot;(map vector x)&quot; &quot;(map vector x y x)&quot; &quot;(map {} x y)&quot; &quot;(map [] x y)&quot; &quot;(map vector x y)&quot; &quot;(doc read-string)&quot; &quot;(def t '(1 2 3 4 5))&quot; &quot;(nth t 3)&quot; &quot;(def x '(calculate-average-velocity (velocity-data (parse-csv-data \&quot;Test.csv\&quot;))))&quot; &quot;(println x)&quot; &quot;(2.524656410335703 0.5227858055235618 0.3412237803305549 5.658254868112438 1.6874651417936692 2.970821569572699 1.2383221073570696 0.34700815781145483 1.3708923416301282 0.5775027443995892)\n&quot; &quot;(def x (2.524656410335703 0.5227858055235618 0.3412237803305549 5.658254868112438 1.6874651417936692 2.970821569572699 1.2383221073570696 0.34700815781145483 1.3708923416301282 0.5775027443995892))&quot; &quot;(def x '(2.524656410335703 0.5227858055235618 0.3412237803305549 5.658254868112438 1.6874651417936692 2.970821569572699 1.2383221073570696 0.34700815781145483 1.3708923416301282 0.5775027443995892))&quot; &quot;(doc nth)&quot; &quot;(def x '(1 2 3))&quot; &quot;(map inc x)&quot; &quot;(map println x)&quot; &quot;(doc map)&quot; &quot;(def x '(1 2 3 4 5))&quot; &quot;(def y '(6 7 8 9 10))&quot; &quot;(defn add [x y] (+ x y))&quot; &quot;(map add x y)&quot; &quot;(read-string \&quot;fail\&quot;)&quot; &quot;(read-string \&quot;11\&quot;)&quot; &quot;(read-string \&quot;11\&quot; \&quot;hello\&quot;)&quot; &quot;(read-string \&quot;fail\&quot; \&quot;hello\&quot;)&quot; &quot;(read-string \&quot;Hello\&quot;)&quot; &quot;(type (read-string \&quot;Hello\&quot;))&quot; &quot;(type \&quot;Hello\&quot;)&quot; &quot;x&quot; &quot;xml-seq&quot; &quot;(inc 5)&quot; &quot;(= :Test (read-string \&quot;Test\&quot;))&quot; &quot;(type (read-string \&quot;Test\&quot;))&quot; &quot;(= 'Test (read-string \&quot;Test\&quot;))&quot; &quot;(def x '(1 2 3 4 5 6))&quot; &quot;(filter #(&gt; 3 %) x)&quot;], :remote []}}</component>
</project>